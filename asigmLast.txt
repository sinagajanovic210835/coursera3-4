package forcomp

object Anagrams extends AnagramsInterface {

  /** A word is simply a `String`. */
  type Word = String

  /** A sentence is a `List` of words. */
  type Sentence = List[Word]

  /** `Occurrences` is a `List` of pairs of characters and positive integers saying
   * how often the character appears.
   * This list is sorted alphabetically w.r.t. to the character in each pair.
   * All characters in the occurrence list are lowercase.
   *
   * Any list of pairs of lowercase characters and their frequency which is not sorted
   * is **not** an occurrence list.
   *
   * Note: If the frequency of some character is zero, then that character should not be
   * in the list.
   */
  type Occurrences = List[(Char, Int)]

  /** The dictionary is simply a sequence of words.
   * It is predefined and obtained as a sequence using the utility method `loadDictionary`.
   */
  val dictionary: List[Word] = Dictionary.loadDictionary

  /** Converts the word into its character occurrence list.
   *
   * Note: the uppercase and lowercase version of the character are treated as the
   * same character, and are represented as a lowercase character in the occurrence list.
   *
   * Note: you must use `groupBy` to implement this method!
   */
  def wordOccurrences(w: Word): Occurrences = {
    val tmp = w.toLowerCase().toList.groupBy(p => p)
    tmp.map(x => (x._1, x._2.length)).toList.sortBy(p => p._1)(Ordering.Char)
  }

  /** Converts a sentence into its character occurrence list. */
  def sentenceOccurrences(s: Sentence): Occurrences =
    wordOccurrences(s.flatten.mkString)

  /** The `dictionaryByOccurrences` is a `Map` from different occurrences to a sequence of all
   * the words that have that occurrence count.
   * This map serves as an easy way to obtain all the anagrams of a word given its occurrence list.
   *
   * For example, the word "eat" has the following character occurrence list:
   *
   * `List(('a', 1), ('e', 1), ('t', 1))`
   *
   * Incidentally, so do the words "ate" and "tea".
   *
   * This means that the `dictionaryByOccurrences` map will contain an entry:
   *
   * List(('a', 1), ('e', 1), ('t', 1)) -> Seq("ate", "eat", "tea")
   *
   */
  lazy val dictionaryByOccurrences: Map[Occurrences, List[Word]] =
    dictionary.groupBy(s => wordOccurrences(s)) withDefaultValue List()

  /** Returns all the anagrams of a given word. */
  def wordAnagrams(word: Word): List[Word] =
    dictionaryByOccurrences(wordOccurrences(word))

  /** Returns the list of all subsets of the occurrence list.
   * This includes the occurrence itself, i.e. `List(('k', 1), ('o', 1))`
   * is a subset of `List(('k', 1), ('o', 1))`.
   * It also include the empty subset `List()`.
   *
   * Example: the subsets of the occurrence list `List(('a', 2), ('b', 2))` are:
   *
   * List(
   * List(),
   * List(('a', 1)),
   * List(('a', 2)),
   * List(('b', 1)),
   * List(('a', 1), ('b', 1)),
   * List(('a', 2), ('b', 1)),
   * List(('b', 2)),
   * List(('a', 1), ('b', 2)),
   * List(('a', 2), ('b', 2))
   * )
   *
   * Note that the order of the occurrence list subsets does not matter -- the subsets
   * in the example above could have been displayed in some other order.
   */
  def combinations(occurrences: Occurrences): List[Occurrences] = {
    val pair = (for (o <- occurrences; i <- 1 to o._2) yield ((o._1, i), List((o._1, i)))).unzip
    val letters = pair._1
    val start   = pair._2

    def loop(ls: List[Occurrences], acc: List[Occurrences]): List[Occurrences] = {
      val sol = for {
        el <- ls
        a  <- letters.dropWhile(x => el.exists(e => e._1 >= x._1))
      } yield el ::: List(a)
      if (sol.isEmpty) List() :: acc
      else loop(sol, acc ::: sol)
    }
    loop(start, start)
  }

  /** Subtracts occurrence list `y` from occurrence list `x`.
   *
   * The precondition is that the occurrence list `y` is a subset of
   * the occurrence list `x` -- any character appearing in `y` must
   * appear in `x`, and its frequency in `y` must be smaller or equal
   * than its frequency in `x`.
   *
   * Note: the resulting value is an occurrence - meaning it is sorted
   * and has no zero-entries.
   */
  def subtract(x: Occurrences, y: Occurrences): List[(Char, Int)] =
    if (y.isEmpty) x else {
      def subtr(ls: List[(Char, Int)]): List[(Char, Int)] = ls match {
        case Nil => throw new NoSuchElementException("Empty List")
        case _ :: Nil    => ls
        case a :: b :: _ => if (a._2 == b._2) Nil else List((a._1, a._2 - b._2))
      }

      val pair = x ::: y groupBy (p => p._1)
      pair.map(x => subtr(x._2)).flatten.toList.sortBy(p => p._1)(Ordering.Char)
    }

  /** Returns a list of all anagram sentences of the given sentence.
   *
   * An anagram of a sentence is formed by taking the occurrences of all the characters of
   * all the words in the sentence, and producing all possible combinations of words with those characters,
   * such that the words have to be from the dictionary.
   *
   * The number of words in the sentence and its anagrams does not have to correspond.
   * For example, the sentence `List("I", "love", "you")` is an anagram of the sentence `List("You", "olive")`.
   *
   * Also, two sentences with the same words but in a different order are considered two different anagrams.
   * For example, sentences `List("You", "olive")` and `List("olive", "you")` are different anagrams of
   * `List("I", "love", "you")`.
   *
   * Here is a full example of a sentence `List("Yes", "man")` and its anagrams for our dictionary:
   *
   * List(
   * List(en, as, my),
   * List(en, my, as),
   * List(man, yes),
   * List(men, say),
   * List(as, en, my),
   * List(as, my, en),
   * List(sane, my),
   * List(Sean, my),
   * List(my, en, as),
   * List(my, as, en),
   * List(my, sane),
   * List(my, Sean),
   * List(say, men),
   * List(yes, man)
   * )
   *
   * The different sentences do not have to be output in the order shown above - any order is fine as long as
   * all the anagrams are there. Every returned word has to exist in the dictionary.
   *
   * Note: in case that the words of the sentence are in the dictionary, then the sentence is the anagram of itself,
   * so it has to be returned in this list.
   *
   * Note: There is only one anagram of an empty sentence.
   */
  def sentenceAnagrams(sentence: Sentence): List[Sentence] = {

    val memo:scala.collection.mutable.Map[Sentence, List[Sentence]] = scala.collection.mutable.Map()

    def sentenceAnagramsMemo(sentence: Sentence, dictionary:Map[Occurrences, List[Word]], restOcc:Occurrences): List[Sentence] = {
      if(memo.contains(sentence)) memo(sentence)
      else {
        val restComb   = combinations(restOcc)
        val restDict   = dictionary.filter(p => restComb.contains(p._1))
        val tmp        = sentAnag(sentence, restDict)
        memo          += (sentence -> tmp)
        tmp
      }
    }

    def sentAnag(sentence: Sentence, dictionary: Map[Occurrences, List[Word]]): List[Sentence] =
      if (sentence.isEmpty || dictionary.isEmpty) List(List()) else {
      val sentOcc = sentenceOccurrences(sentence)
      def findSol(wordOcc: Occurrences): List[Sentence] = {
        val listWords  = dictionary(wordOcc)
          if (wordOcc == sentOcc) for (w <- listWords) yield w :: Nil
          else {
            val restOcc       = subtract(sentOcc, wordOcc)
            val restSnt       = List(restOcc.flatMap(p => for (_ <- 1 to p._2) yield p._1).mkString)
            val restSolution  = sentenceAnagramsMemo(restSnt, dictionary, restOcc)
            for {
              word         <- listWords
              listSentence <- restSolution
                if sentenceOccurrences(word :: listSentence) == sentOcc
            } yield (word :: listSentence)
          }
        }
      def loop(ls: List[Occurrences], acc: List[Sentence]): List[Sentence] = {
        if (ls.isEmpty) acc
        else loop(ls.tail, findSol(ls.head) ::: acc)
      }
      val wordList = dictionary.keys.toList
      loop(wordList, Nil)
    }

    val combs = combinations(sentenceOccurrences(sentence))
    val dictionary = combs.filter(p => dictionaryByOccurrences.contains(p)).
                     map(p => p -> dictionaryByOccurrences(p)).toMap

    sentAnag(sentence, dictionary)
}

}
object Dictionary {
  def loadDictionary: List[String] = {
    val wordstream = Option {
      getClass.getResourceAsStream(List("forcomp", "linuxwords.txt").mkString("/", "/", ""))
    } getOrElse {
      sys.error("Could not load word list, dictionary file not found")
    }
    try {
      val s = scala.io.Source.fromInputStream(wordstream)
      s.getLines.toList
    } catch {
      case e: Exception =>
        println("Could not load word list: " + e)
        throw e
    } finally {
      wordstream.close()
    }
  }
}
